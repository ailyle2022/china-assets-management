// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model BlogPost {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  status     String
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id        Int        @id @default(autoincrement())
  title     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  blogPosts BlogPost[] // 添加反向关系字段
}

model Vender {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  contact String?
  email   String?
  address String?

  companies Company[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Company {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  address String?
  contact String?
  email   String?

  venderId       Int
  vender         Vender          @relation(fields: [venderId], references: [id])
  purchaseOrders PurchaseOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PurchaseOrder {
  id                  Int      @id @default(autoincrement())
  purchaseOrderNumber String   @unique
  date                DateTime

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  assets    Asset[]
}

model Asset {
  id             Int      @id @default(autoincrement())
  serialNumber   String?
  assetNumber    String?
  name           String
  description    String?
  warrantyExpiry DateTime
  localPrice     Float
  localCurrency  String
  globalPrice    Float
  status         String

  locationId            Int
  location              Location      @relation(fields: [locationId], references: [id])
  purchaseOrderNumberId Int
  purchaseOrderNumber   PurchaseOrder @relation(fields: [purchaseOrderNumberId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Location {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  type   String
  assets Asset[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
